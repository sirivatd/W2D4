    return false
    end
      i += 1
      return true if hash.keys.include?(target)
      hash[arr[i]] -= 1
      target = target_sum - arr[i]
    while i < arr.length
    i = 0
    end
      hash[el] += 1
    arr.each do |el|
    hash = Hash.new {|h,k| h[k] = 0}
  def two_sum?(arr, target_sum)
hash
target
n
    return false
    end
      i += 1
      return true if hash[target] > 0
      target = target_sum - arr[i]
    while i < arr.length
    end
      hash[el] += 1
    arr.each do |el|
    hash = Hash.new {|h,k| h[k] = 0}
  def two_sum?(arr, target_sum)
okay_two_sum?(arr,10)
okay_two_sum?(arr,6)
arr = [0,1,5,7]
load 'two_sum.rb'
c
      return true
    when 0
      bsearch(arr[0...mid], target)
    when 1 
    case arr[mid] <=> target
    mid = arr.length/2
    return false if arr.length < 1
  def bsearch(arr, target)
bsearch(temp_arr,10)
target
temp_arr
found_pair
n
temp_arr
n
target
n
target
c
n
c
char_arr2.index(target)
char_arr2
target
n
nn
n
max_sum
n
q
j
max_sum
j
n
nn
n
max_sum
n
max_sum
n
sum_sub(list[i..j])
j
p i 
n
sum_sub(list[i..j])
n
j 
p i 
pi 
n
quit
j
p i
n
sum_sub(list[i..j])
j
n
quit
j
n
sum_sub(list[i..j])
max_sum
n
max_sum
current_sum
sum_sub(list[i..j])
n
list.length
p i 
i
c
